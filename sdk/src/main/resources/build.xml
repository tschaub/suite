<?xml version="1.0" encoding="UTF-8"?>
<project name="suite-sdk" default="usage" basedir=".">

    <description>
        Suite Client SDK
    </description>

    <target name="usage">
        <echo message=""/>
        <echo message="Suite Client SDK Commands"/>
        <echo message=""/>
        <echo message=" create     --> create a new application"/>
        <echo message=" debug      --> run an application in debug mode"/>
        <echo message=" deploy     --> deploy an existing application"/>
    </target>

    <property name="app.proxy.geoserver" value=""/>
    <property name="app.port" value="8080"/>
    <property name="cargo.host" value="localhost"/>
    <property name="cargo.port" value="8080"/>
    <property name="cargo.container" value="tomcat6x"/>
    <property name="cargo.username" value="manager"/>
    <property name="cargo.password" value=""/>

    <target name="checkpath">
        <condition property="app.path.set">
            <isset property="app.path"/>
        </condition>
        <fail message="Missing app path." unless="${app.path.set}"/>
        <condition property="app.path.exists">
            <available file="${app.path}" type="dir"/>
        </condition>
        <basename property="app.name" file="${app.path}"/>
    </target>

    <target name="create" depends="checkpath">
        <fail message="Directory '${app.path}' already exists.  Specify the name for a new app directory." if="${app.path.exists}"/>

        <mkdir dir="${app.path}"/>
        <copy todir="${app.path}">
            <fileset dir="src/main/resources/client"/>
        </copy>
    </target>

    <target name="debug" depends="checkpath">
        <fail message="Directory '${app.path}' doesn't exist." unless="${app.path.exists}"/>

        <java classname="org.ringojs.tools.launcher.Main" failonerror="true" fork="true">
            <classpath>
                <fileset dir="lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <sysproperty key="app.static" path="${app.path}"/>
            <sysproperty key="app.debug" value="1"/>
            <sysproperty key="app.proxy.geoserver" value="${app.proxy.geoserver}"/>
            <sysproperty key="ringo.home" path="."/>
            <sysproperty key="ringo.modulepath" path="lib"/>
            <arg path="src/main/resources/server/main.js"/>
            <arg line="-p ${app.port}"/>
        </java>

    </target>
    
    <target name="build" depends="checkpath">
        <fail message="Directory '${app.path}' doesn't exist." unless="${app.path.exists}"/>
        
        <mkdir dir="build/${app.name}"/>
        
        <copy todir="build/${app.name}">
            <fileset dir="src/main/webapp"/>
            <filterset>
                <filter token="APP_NAME" value="${app.name}"/>
            </filterset>
        </copy>

        <!-- copy Ext resources -->
        <copy todir="build/${app.name}/src/ext">
            <fileset dir="${app.path}/src/ext"/>
        </copy>
        <!-- copy OpenLayers resources -->
        <copy todir="build/${app.name}/src/openlayers/theme">
            <fileset dir="${app.path}/src/openlayers/theme"/>
        </copy>
        <!-- copy GeoExt resources -->
        <copy todir="build/${app.name}/src/geoext/resources">
            <fileset dir="${app.path}/src/geoext/resources"/>
        </copy>
        <!-- copy gxp resources -->
        <copy todir="build/${app.name}/src/gxp/theme">
            <fileset dir="${app.path}/src/gxp/theme"/>
        </copy>
        
        <!-- build app js -->
        <mkdir dir="build/${app.name}/lib"/>
        <java classname="org.ringojs.tools.launcher.Main" failonerror="true">
            <classpath>
                <fileset dir="lib">
                    <include name="**/*.jar"/>
                </fileset>
            </classpath>
            <sysproperty key="ringo.home" path="."/>
            <sysproperty key="ringo.modulepath" path="lib"/>
            <arg path="lib/buildkit/lib/buildkit/build.js"/>
            <arg line="-o build/${app.name}/lib ${app.path}/buildjs.cfg"/>
        </java>

        <!-- copy additional app resources -->
        <copy todir="build/${app.name}/theme">
            <fileset dir="${app.path}/theme"/>
        </copy>
        <copy todir="build/${app.name}">
            <fileset dir="${app.path}">
                <include name="*"/>
            </fileset>
        </copy>

    </target>

    <target name="war" depends="build">
        <war destfile="build/${app.name}.war" needxmlfile="false">
            <fileset dir="build/${app.name}"/>
        </war>
    </target>

    <target name="initcargo">
        <echo message="pulling in Cargo for remote deployment"/>
        <mkdir dir="lib"/>
        <get skipexisting="true" src="http://repo1.maven.org/maven2/org/codehaus/cargo/cargo-core-uberjar/1.2.1/cargo-core-uberjar-1.2.1.jar" dest="lib/cargo-core-uberjar.jar"/>
        <get skipexisting="true" src="http://repo1.maven.org/maven2/org/codehaus/cargo/cargo-ant/1.2.1/cargo-ant-1.2.1.jar" dest="lib/cargo-ant.jar"/>
        <get skipexisting="true" src="http://repo1.maven.org/maven2/commons-discovery/commons-discovery/0.4/commons-discovery-0.4.jar" dest="lib/commons-discovery.jar"/>
        <get skipexisting="true" src="http://repo1.maven.org/maven2/commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar" dest="lib/commons-logging.jar"/>
        <taskdef resource="cargo.tasks">
          <classpath>
            <pathelement location="lib/cargo-core-uberjar.jar"/>
            <pathelement location="lib/cargo-ant.jar"/>
            <pathelement location="lib/commons-discovery.jar"/>
            <pathelement location="lib/commons-logging.jar"/>
          </classpath>
        </taskdef>
    </target>

    <target name="deploy" depends="initcargo,war">
        <cargo containerId="${cargo.container}" action="redeploy" type="remote">
          <configuration type="runtime">
            <property name="cargo.hostname" value="${cargo.host}"/>
            <property name="cargo.servlet.port" value="${cargo.port}"/>
            <property name="cargo.remote.username" value="${cargo.username}"/>
            <property name="cargo.remote.password" value="${cargo.password}"/>
            <deployable type="war" file="build/${app.name}.war">
              <property name="context" value="${app.name}"/>
            </deployable>
          </configuration>
        </cargo>
    </target>


</project>
